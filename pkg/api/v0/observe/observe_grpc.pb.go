// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v0/observe/observe.proto

package observev0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObserveServiceClient is the client API for ObserveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObserveServiceClient interface {
	// request log stream for aurae. everything logged via log macros in aurae (info!, error!, trace!, ... ).
	GetAuraeDaemonLogStream(ctx context.Context, in *GetAuraeDaemonLogStreamRequest, opts ...grpc.CallOption) (ObserveService_GetAuraeDaemonLogStreamClient, error)
	// TODO: request log stream for a sub process
	GetSubProcessStream(ctx context.Context, in *GetSubProcessStreamRequest, opts ...grpc.CallOption) (ObserveService_GetSubProcessStreamClient, error)
}

type observeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObserveServiceClient(cc grpc.ClientConnInterface) ObserveServiceClient {
	return &observeServiceClient{cc}
}

func (c *observeServiceClient) GetAuraeDaemonLogStream(ctx context.Context, in *GetAuraeDaemonLogStreamRequest, opts ...grpc.CallOption) (ObserveService_GetAuraeDaemonLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObserveService_ServiceDesc.Streams[0], "/aurae.observe.v0.ObserveService/GetAuraeDaemonLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &observeServiceGetAuraeDaemonLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObserveService_GetAuraeDaemonLogStreamClient interface {
	Recv() (*LogItem, error)
	grpc.ClientStream
}

type observeServiceGetAuraeDaemonLogStreamClient struct {
	grpc.ClientStream
}

func (x *observeServiceGetAuraeDaemonLogStreamClient) Recv() (*LogItem, error) {
	m := new(LogItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *observeServiceClient) GetSubProcessStream(ctx context.Context, in *GetSubProcessStreamRequest, opts ...grpc.CallOption) (ObserveService_GetSubProcessStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObserveService_ServiceDesc.Streams[1], "/aurae.observe.v0.ObserveService/GetSubProcessStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &observeServiceGetSubProcessStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObserveService_GetSubProcessStreamClient interface {
	Recv() (*LogItem, error)
	grpc.ClientStream
}

type observeServiceGetSubProcessStreamClient struct {
	grpc.ClientStream
}

func (x *observeServiceGetSubProcessStreamClient) Recv() (*LogItem, error) {
	m := new(LogItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ObserveServiceServer is the server API for ObserveService service.
// All implementations must embed UnimplementedObserveServiceServer
// for forward compatibility
type ObserveServiceServer interface {
	// request log stream for aurae. everything logged via log macros in aurae (info!, error!, trace!, ... ).
	GetAuraeDaemonLogStream(*GetAuraeDaemonLogStreamRequest, ObserveService_GetAuraeDaemonLogStreamServer) error
	// TODO: request log stream for a sub process
	GetSubProcessStream(*GetSubProcessStreamRequest, ObserveService_GetSubProcessStreamServer) error
	mustEmbedUnimplementedObserveServiceServer()
}

// UnimplementedObserveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedObserveServiceServer struct {
}

func (UnimplementedObserveServiceServer) GetAuraeDaemonLogStream(*GetAuraeDaemonLogStreamRequest, ObserveService_GetAuraeDaemonLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAuraeDaemonLogStream not implemented")
}
func (UnimplementedObserveServiceServer) GetSubProcessStream(*GetSubProcessStreamRequest, ObserveService_GetSubProcessStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSubProcessStream not implemented")
}
func (UnimplementedObserveServiceServer) mustEmbedUnimplementedObserveServiceServer() {}

// UnsafeObserveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObserveServiceServer will
// result in compilation errors.
type UnsafeObserveServiceServer interface {
	mustEmbedUnimplementedObserveServiceServer()
}

func RegisterObserveServiceServer(s grpc.ServiceRegistrar, srv ObserveServiceServer) {
	s.RegisterService(&ObserveService_ServiceDesc, srv)
}

func _ObserveService_GetAuraeDaemonLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAuraeDaemonLogStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObserveServiceServer).GetAuraeDaemonLogStream(m, &observeServiceGetAuraeDaemonLogStreamServer{stream})
}

type ObserveService_GetAuraeDaemonLogStreamServer interface {
	Send(*LogItem) error
	grpc.ServerStream
}

type observeServiceGetAuraeDaemonLogStreamServer struct {
	grpc.ServerStream
}

func (x *observeServiceGetAuraeDaemonLogStreamServer) Send(m *LogItem) error {
	return x.ServerStream.SendMsg(m)
}

func _ObserveService_GetSubProcessStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSubProcessStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObserveServiceServer).GetSubProcessStream(m, &observeServiceGetSubProcessStreamServer{stream})
}

type ObserveService_GetSubProcessStreamServer interface {
	Send(*LogItem) error
	grpc.ServerStream
}

type observeServiceGetSubProcessStreamServer struct {
	grpc.ServerStream
}

func (x *observeServiceGetSubProcessStreamServer) Send(m *LogItem) error {
	return x.ServerStream.SendMsg(m)
}

// ObserveService_ServiceDesc is the grpc.ServiceDesc for ObserveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObserveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aurae.observe.v0.ObserveService",
	HandlerType: (*ObserveServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAuraeDaemonLogStream",
			Handler:       _ObserveService_GetAuraeDaemonLogStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSubProcessStream",
			Handler:       _ObserveService_GetSubProcessStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v0/observe/observe.proto",
}
